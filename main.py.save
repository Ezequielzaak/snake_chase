import pygame
import sys
import random

# Inicializações
pygame.init()
pygame.font.init()

# Configurações da janela
WIDTH, HEIGHT = 640, 480
CELL = 20
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Snake Chase")
clock = pygame.time.Clock()

# Fonte para HUD
font = pygame.font.SysFont(None, 36)

# Carregamento de assets (pasta ~/snake_chase/assets/)
player_img = pygame.image.load("assets/Enzo.png").convert_alpha()      # seu ícone
snake_img  = pygame.image.load("assets/cobrinha.png").convert_alpha()  # ícone da cobra
door_img   = pygame.image.load("assets/portal.png").convert_alpha()    # porta
heart_img  = pygame.image.load("assets/coração.png").convert_alpha()   # ícone de vida
skull_img  = pygame.image.load("assets/caveira.png").convert_alpha()   # ícone de vida perdida

# Classes
clas Player:
    def __init__(self):
        self.x, self.y = WIDTH // 2, HEIGHT // 2
        self.speed = CELL

    def move(self, dx, dy):
        self.x = max(0, min(self.x + dx * self.speed, WIDTH  - CELL))
        self.y = max(0, min(self.y + dy * self.speed, HEIGHT - CELL))

    def draw(self):
        screen.blit(player_img, (self.x, self.y))

class Snake:
    def __init__(self):
        self.x, self.y = 0, 0
        self.speed = CELL

    def chase(self, tx, ty):
        if abs(self.x - tx) > abs(self.y - ty):
            self.x += self.speed if tx > self.x else -self.speed
        else:
            self.y += self.speed if ty > self.y else -self.speed

    def draw(self):
        screen.blit(snake_img, (self.x, self.y))

def spawn_door():
    cols = WIDTH // CELL
    rows = HEIGHT // CELL
    return (random.randint(0, cols - 1) * CELL,
            random.randint(0, rows - 1) * CELL)

# Setup inicial
player        = Player()
snake         = Snake()
door_x, door_y = spawn_door()
score         = 0
lives         = 3

# Loop principal
while True:
    # Eventos
    for e in pygame.event.get():
        if e.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    # Input do player
    keys = pygame.key.get_pressed()
    dx = keys[pygame.K_RIGHT] - keys[pygame.K_LEFT]
    dy = keys[pygame.K_DOWN]  - keys[pygame.K_UP]
    if dx != 0 or dy != 0:
        player.move(dx, dy)

    # Lógica de perseguição
    snake.chase(player.x, player.y)

    # Colisão player ↔ porta
    if player.x == door_x and player.y == door_y:
        score += 1
        print(f"Porta alcançada! Score: {score}")
        door_x, door_y = spawn_door()

    # Colisão cobra ↔ player
    if player.x == snake.x and player.y == snake.y:
        lives -= 1
        print(f"Você foi pego! Vidas restantes: {lives}")
        player        = Player()
        snake         = Snake()
        door_x, door_y = spawn_door()
        if lives == 0:
            print("Todas as vidas perdidas! Score zerado.")
            score = 0
            lives = 3

    # Renderização
    screen.fill((0, 0, 0))  # fundo preto

    # Desenha porta, player e cobra
    screen.blit(door_img,  (door_x,  door_y))
    player.draw()
    snake.draw()

    # HUD: Score
    score_surf = font.render(f"Score: {score}", True, (255,255,255))
    screen.blit(score_surf, (10, 10))

    # HUD: Vidas com ícones
    for i in range(3):
        icon = heart_img if i < lives else skull_img
        screen.blit(icon, (10 + i * (CELL + 5), 50))

    pygame.display.flip()
    clock.tick(10)

